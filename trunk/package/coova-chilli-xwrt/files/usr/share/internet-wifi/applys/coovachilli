require("uci_iwaddon")

parser = {}
local P = {}
parser = P
-- Import Section:
-- declare everything this package needs from outside
local wwwprint = wwwprint
if wwwprint == nil then wwwprint=print end
local uci = uci
local io = io
local string = string
local oldprint = oldprint
local table = table
local pairs = pairs
local tonumber = tonumber
-- no more external access after this point
setfenv(1, P)

script = "chilli"
init_script = "/etc/init.d/chilli"

enable = tonumber(uci.get("coovachilli.webadmin.enable")) or 0
local userlevel = tonumber(uci.get("coovachilli.webadmin.userlevel")) or 0
local radiususers = tonumber(uci.get("coovachilli.webadmin.radconf")) or 0
-- call_parser = "freeradius freeradius_check freeradius_proxy freeradius_clients"

reboot = false                -- reboot device after all apply process
--exe_before = {} -- execute os process in this table before any process
exe_after  = {} -- execute os process after all apply process
if radiususers > 1 then
  exe_after["/etc/init.d/radiusd restart"]="freeradius"
end
--depends_pkgs = "libltdl freeradius freeradius-mod-files freeradius-mod-chap freeradius-mod-radutmp freeradius-mod-realm iw-freeradius"


function process()
  if uci.commit("coovachilli") == true then
    wwwprint("coovachilli commited OK!")
  end
  
  radiususers = tonumber(uci.get("coovachilli.webadmin.radconf")) or 0

  if radiususers > 1 then
    wwwprint("Checking freeradius installation")
    local write_file
    if io.exists("/usr/share/freeradius/dictionary") then
      local dict = io.totable("/usr/share/freeradius/dictionary",true)
      wwwprint("Updating /usr/share/freeradius/dictionary")
      if dict[1] ~= "$INCLUDE dictionary.chillispot" then
        table.insert(dict,1,"$INCLUDE dictionary.chillispot")
      end
      write_file = io.open("/usr/share/freeradius/dictionary","w")
      write_file:write(table.concat(dict,'\n'))
      write_file:close()
    end
  end

  write_init()
  write_config()
end


function write_init()
  wwwprint ("Writing init file /etc/init.d/chilli")
  local init_file = [[#!/bin/sh /etc/rc.common
START=59

EXTRA_COMMANDS="status checkrunning radconfig condrestart"
EXTRA_HELP="	status	Show current status
    checkrunning If services is not running start it"

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/chilli
NAME=chilli
DESC=chilli
CONFFILE=/etc/chilli.conf
OPTS="--pidfile /var/run/$NAME.pid"

. /etc/chilli/functions
check_required

start() {
	echo -n "Starting $DESC: "
   /sbin/modprobe tun >/dev/null 2>&1
   echo 1 > /proc/sys/net/ipv4/ip_forward

   writeconfig
   radiusconfig

   (crontab -l 2>&- | grep -v $0
      test ${HS_ADMINTERVAL:-0} -gt 0 && echo "*/$HS_ADMINTERVAL * * * * $0 radconfig"
      echo "*/10 * * * * $0 checkrunning"
      #echo "*/2  * * * * $0 arping"
   ) | crontab - 2>&-
  $DAEMON -- $OPTS
  RETVAL=$?
	echo "$NAME."
}

status () {
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo "$DESC running"
      exit 0
		}
    echo "$DESC stopped"
}

checkrunning () {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
			exit 0
		}
    $0 start
}

radconfig () {
      [ -e $MAIN_CONF ] || writeconfig
      radiusconfig
}

stop () {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo -n "Stopping $DESC: "
      crontab -l 2>&- | grep -v $0 | crontab -
      kill -TERM "$pid"
      [ "$?" -eq 0 ] && sleep 1
      [ ! -d "/proc/$pid" ] && echo "OK" || {
  			echo "Failed!"
        echo -n "Killing chilli..."
        kill -KILL "$pid"
        [ "$?" -eq 0 ] && echo "OK" || echo "Failed!"
      }
      exit 0
		}
		echo "$DESC was not running"
}

condrestart() {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo -n "Restarting $DESC: "
      $0 restart
      RETVAL=$?
		}
}
]]
  write_file = io.open("/etc/init.d/chilli","w")
  write_file:write(init_file)
  write_file:close()
  wwwprint("/etc/init.d/chilli writed OK!")
end

function write_config()
  wwwprint ("Writing configuration file /etc/chilli/config")
  local coovadir = uci.get_type("coovachilli","coovadir")
  local str_set="#### This conf file was writed by iw-apply for coova ####\n"
  for x,y in pairs(coovadir) do
    for k, v in pairs(y) do
      if k ~= ".type"
      and k ~= ".name" then
        str_set = str_set..k.."="..v.."\n"
      end
    end
  end
  local chillisettings = uci.get_type("coovachilli","settings")
  for x,y in pairs(chillisettings) do
    for k, v in pairs(y) do
      if k ~= ".type"
      and k ~= ".name" then
        if string.match(v,"%s") then v = "\""..v.."\"" end
        str_set = str_set..k.."="..v.."\n"
      end
    end
  end
  write_file = io.open("/etc/chilli/config","w")
  write_file:write(str_set)
  write_file:close()
  wwwprint("/etc/chilli/config writed OK!")
end

return parser
