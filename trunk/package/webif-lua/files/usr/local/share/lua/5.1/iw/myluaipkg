#!/usr/bin/lua
package.cpath = "?;./?.so;/usr/lib/lua/5.1/?.so" 
package.path = "?;./?.lua;/usr/local/share/lua/5.1/iw/?.lua;/usr/lib/webif/LUA/?.lua;/usr/lib/webif/LUA/pkgs/?.lua;/usr/lib/lua/5.1/?.lua" 

require("common")
require("lpkg")

function init(pkg_list,use_repo)
  local pepe = lpkgClass.new(table.concat(pkg_list," "))
  if use_repo then
    pepe:loadRepo(use_repo)
  else
    for k, v in pairs(pepe.RepoList) do
      pepe:loadRepo(k)
    end
  end
  return pepe
end

function list_installed_pkgs(pepe,detailled)
  local title = true
  if pepe.Installed then
    for i,c in pairsByKeys(pepe.Installed) do
      if i ~= "url" then
        if title == true then 
          print("Installed")
          title = false
        end
--        print(" ",i,c.Version,c.Description)
        print(" ",i,c.Version)
        if detailled == true then
          if type(c)=="table" then
            for u,j in pairs(c) do
              print(" "," ",u,j)
            end
          end
        end
      end
    end
  end
end

function list_pkgs(pepe,detailled)
  if pepe.RepoList then
    for k, v in pairs(pepe.RepoList) do
      local title = true
--      print(k,v.url)
      if type(v)=="table" then
        for i,c in pairsByKeys(v) do
          if i ~= "url" then
            if title == true then 
              print(k,v.url)
              title = false
            end
--            print(" ",i,c.Version,c.Description)
            print(" ",i,c.Version,c.Depends)
            if detailled == true then
              if type(c)=="table" then
                for u,j in pairs(c) do
                  print(" "," ",u,j)
                end
              end
            end
          end
        end
      end
    end
  end
end

function install_pkgs(pepe,version)
  local count = 0
  local toInstall = {}
  
  if pepe.RepoList then
    for k, v in pairs(pepe.RepoList) do
      if type(v)=="table" then
        for i,c in pairsByKeys(v) do
          if pepe.Installed == nil or pepe.Installed[i] == nil then
            if i ~= "url" then
              if version == nil then
                if toInstall[i]==nil then
                  toInstall[i] = c
                  toInstall[i]["url"] = v.url
                  count = count + 1
                else
                  if c.Version > toInstall[i].Version then
                    toInstall[i] = c
                    toInstall[i]["url"] = v.url
                  end
                end
              else
                if c.Version == version then
                  if toInstall[i]==nil then
                    toInstall[i] = c
                    toInstall[i]["url"] = v.url
                    count = count + 1
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  
  if count == 0 then
    print("nothing to do")
  end

  for i,v in pairs(toInstall) do
--    print(i,v.Version,v.url..v.Filename)
    print(i,v.Version,v.Depends)
  end
end

local script = arg[0]
local cmd = arg[1]
local pkg_list = {}
local detailled = false

for i=2, #arg do
    if arg[i] == "-r" then
      use_repo = arg[i+1]
      i = i + 1
    elseif arg[i] == "-v" then
      use_version = arg[i+1]
      i = i + 1
    elseif arg[i] == "-d" then
      detailled = true
    elseif arg[i] == ">"
    or arg[i] == ">>" then
      break
    else 
      pkg_list[#pkg_list+1]=arg[i]
    end
end


if cmd == "list" then
  pepe = init(pkg_list,use_repo)
  print("lista de packetes")
  list_pkgs(pepe,detailled)
elseif cmd == "list_installed" then
  pepe = init({},"")
  print("List Installed packages")
  list_installed_pkgs()
elseif cmd == "repo_list" then
  pepe = init(pkg_list,use_repo)
  print("Repository List")
  repo_list()
elseif cmd == "install" then
  pepe = init(pkg_list,use_repo)
  print("install packages")
  install_pkgs(pepe,use_version)
else
  print(arg[0].." [command] [pacage[*]] [-options]")
  print("","commands")
  print("","","list", "list of packages")
  print("","","install", "install packages")
end
--[[
print("")
print("Que hay en RepoList")
for i,t in pairs(pepe.Installed) do
  print(i,t)
--  for k,v in pairs(t) do
--    print(k,v)
--  end
end
]]--
