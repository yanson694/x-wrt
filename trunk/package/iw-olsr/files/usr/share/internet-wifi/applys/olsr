--require("iw-uci")
--require("iwuci")
--require("net")
require("uci_iwaddon")

parser = {}
local P = {}
parser = P
-- Import Section:
-- declare everything this package needs from outside
local io = io
local wwwprint = wwwprint
if wwwprint == nil then wwwprint=print end
local oldprint = oldprint
local table = table
local type = type
local string = string
local pairs = pairs
--local iwuci = iwuci
--local uciClass = uciClass
--local net = net
local tonumber = tonumber
local os = os
local tr = tr
local uci = uci

-- no more external access after this point
setfenv(1, P)

local olsr = uci.get_all("olsr")
local network = uci.get_all("network")
local wireless = uci.get_all("wireless")

enable    = tonumber(olsr.webadmin.enable)    or 0
userlevel = tonumber(olsr.webadmin.userlevel) or 0
reboot    = false                -- reboot device after all apply process

local output_file = "/etc/olsrd.conf"
local ctrl_file   = "/var/etc/olsrd.ctrl"
--exe_before = {} -- execute os process in this table before any process
exe_after  = {} -- execute os process after all apply process
--exe_after["/usr/lib/webif/LUA/olsr/netinit.sh"]="Networks"
exe_after["/etc/init.d/network restart"]="Networks"
exe_after["wifi"]="Wifi"
name = "OLSR"
script = "olsrd"
init_script = "/etc/init.d/olsrd"

function process()
  wwwprint(name.." Parsers...")
  process_config()
  write_init()
  write_config()
end

function write_init()
  local wififace = uci.get("olsr","webadmin","device")
  local initfile =[[#!/bin/sh /etc/rc.common
START=50

BIN=olsrd
CONF_F=/var/etc/olsrd.conf
USE_CONF_F=/etc/olsrd.conf
DEFAULT=/etc/default/olsrd
RUN_D=/var/run
PID_F=$RUN_D/$BIN.pid
CRONSET="* * * * * /usr/share/internet-wifi/pkgs/olsr/minute.cron"

start() {
	include /lib/network
	scan_interfaces
	config_load /var/state/network
	
	config_get WAN wan ifname
	config_get WANDEV wan device
	config_get LAN lan ifname
  
  WIFI=]]..wififace..[[  
  # Allow connections to olsr info port.
  iptables        -A input_wan      -p tcp --dport 1979 -j ACCEPT
  # OLSR needs port 698 to transmit state messages. 
  iptables -A input_rule -p udp --dport 698 -j ACCEPT
  iptables -A input_rule -p udp --dport 53 -j ACCEPT
  iptables -A input_rule -p tcp --dport 53 -j ACCEPT

  iptables -A forwarding_rule -i $WAN -o $WIFI -j ACCEPT
  iptables -A forwarding_rule -i $WIFI -o $WAN -j ACCEPT
  # For forwarding LAN & WIFI in nodes
  iptables -A forwarding_rule -i $LAN -o $WIFI -j ACCEPT
  iptables -A forwarding_rule -i $WIFI -o $LAN -j ACCEPT

  # For WIFI clients to connect to nodes.
  iptables -A forwarding_rule -i $WIFI -o $WIFI -j ACCEPT

  # For connecting a wired lan client of node 1 to wired lan client of node 2
  iptables -A forwarding_rule -i $LAN -o $LAN -j ACCEPT
  
  # Masquerade all trafic
  iptables -t nat -A POSTROUTING -o $WIFI -j MASQUERADE
  iptables -t nat -A POSTROUTING -o $WAN -j MASQUERADE
  iptables -t nat -A POSTROUTING -o $LAN -j MASQUERADE
  
  /usr/share/internet-wifi/lib/cron_ctrl add "$CRONSET"

	$BIN -f "$USE_CONF_F" -nofork $OPTIONS &

	# write pid file (but strip out own pid ($$))
	mkdir -p $RUN_D
	PID=`pidof $BIN`
	echo ${PID%$$} > $PID_F
  echo "OLSR is running"
}

stop() {
  /usr/share/internet-wifi/lib/cron_ctrl del "$CRONSET"
	killall olsrd
}
]]
  os.execute ("echo '"..initfile.."' > /etc/init.d/olsrd")
end

function process_config()
  local str_olsrconf = ""
  olsr = uci.get_all("olsr")
-- Network Setting --
  local set_netname = olsr.webadmin.netname or "olsrnet"
  local set_nodenumber = olsr.webadmin.nodenumber or "1"
  local set_netaddr = olsr.webadmin.ipaddr or "10.128."..set_nodenumber..".1"
  local set_netmask = olsr.webadmin.netmask or "255.255.0.0"

  wwwprint(tr("Setting networks"))
  network = uci.get_all("network")
  if network[set_netname] == nil then 
    uci.set("network",set_netname,"interface")
  end
  uci.set("network",set_netname,"ipaddr",set_netaddr)
--  wwwprint(tr("Set ipaddress").." "..set_netaddr)
  uci.set("network",set_netname,"netmask",set_netmask)
--  wwwprint(tr("Set netmask").." "..set_netmask)
  uci.set("network",set_netname,"proto","static")
--  wwwprint(tr("Set proto").." static")
  uci.set("network",set_netname,"dns","204.225.44.3")
--  wwwprint(tr("Set DNS").." static")
  uci.commit("network")
--  os.execute("rm /tmp/.uci/network 2> /dev/null")

-- Wireless --
  local set_device = olsr.webadmin.device or "wl0"
  local set_ssid = olsr.webadmin.ssid or "X-Wrt"
  local set_channel = olsr.webadmin.channel or "6"

  wwwprint(tr("Setting Wireless"))
  local wififace = uci.get_type("wireless","wifi-iface")
--  wwwprint("algo",#wififace)
  for i=1, #wififace do
    if wififace[i].device == set_device then
      uci.set("wireless",wififace[1][".name"],"ssid",set_ssid)
--      wwwprint(tr("Set SSID").." "..set_ssid)
      uci.set("wireless",wififace[1][".name"],"network",set_netname)
--      wwwprint(tr("Set Network").." "..set_netname)
      uci.set("wireless",wififace[1][".name"],"mode","adhoc")
--      wwwprint(tr("Set Mode").." ".."AdHoc")
      uci.set("wireless",set_device,"channel",set_channel)
--      wwwprint(tr("Set Channel").." "..set_channel)
      uci.set("wireless",set_device,"disabled","0")
--      wwwprint(tr("Enabling Wireless"))
      break
    end
  end
  uci.commit("wireless")
--  os.execute("rm /tmp/.uci/wireless 2> /dev/null")
--  os.execute("wifi")
-- olsr --

--  olsr = uciClass.new("olsr")
  olsr = uci.get_all("olsr")
  if olsr.webadmin == nil then uci.set("olsr","webadmin","websettings") end
  if olsr.general == nil then uci.set("olsr","general","olsr") end
  uci.set("olsr","webadmin","netname",set_netname)
  uci.set("olsr","webadmin","nodenumber",set_nodenumber)
  uci.set("olsr","webadmin","netmask", set_netmask)
  uci.set("olsr","webadmin","ipaddr", set_netaddr)
  uci.set("olsr","webadmin","device", set_device)
  uci.set("olsr","webadmin","ssid", set_ssid)
  uci.set("olsr","webadmin","channel", set_channel)
  uci.set("olsr","webadmin","enable", enable)
--  wwwprint("general settings")
  if uci.get("olsr","general","UseHysteresis") == nil then
    uci.get("olsr","general","UseHysteresis","no") end
  if uci.get("olsr","general","LinkQualityFishEye") == nil then
    uci.get("olsr","general","LinkQualityFishEye","1") end
  if uci.get("olsr","general","IpVersion") == nil then
    uci.get("olsr","general","IpVersion","4") end
  if uci.get("olsr","general","AllowNoInt") == nil then
    uci.get("olsr","general","AllowNoInt","yes") end
  if uci.get("olsr","general","TcRedundancy") == nil then
    uci.get("olsr","general","TcRedundancy","2") end
  if uci.get("olsr","general","LinkQualityLevel") == nil then
    uci.get("olsr","general","LinkQualityLevel","2") end
  if uci.get("olsr","general","MprCoverage") == nil then
    uci.get("olsr","general","MprCoverage","7") end
  if uci.get("olsr","general","LinkQualityWinSize") == nil then
    uci.get("olsr","general","LinkQualityWinSize","100") end
  if uci.get("olsr","general","LinkQualityDijkstraLimit") == nil then
    uci.get("olsr","general","LinkQualityDijkstraLimit","0 9.0") end
  if uci.get("olsr","general","DebugLevel") == nil then
    uci.get("olsr","general","DebugLevel","0") end
  if uci.get("olsr","general","Pollrate") == nil then
    uci.get("olsr","general","Pollrate","0.025") end
  if uci.get("olsr","general","TosValue") == nil then
    uci.get("olsr","general","TosValue","16") end
  local interfaces = uci.get_type("olsr","Interface")
  if interfaces == nil then
    interface = uci.add("olsr","Interface")
    uci.set("olsr",interface,"Interface",set_device)
    uci.save("olsr")
  end
  
--   
  local iok = false
  interfaces = uci.get_type("olsr","Interface")
--  wwwprint("interface settings")
  for i=1, #interfaces do
    if uci.get("olsr",interfaces[i][".name"],"MidValidityTime") == nil then
      uci.set("olsr",interfaces[i][".name"],"MidValidityTime","324.0") end
    if uci.get("olsr",interfaces[i][".name"],"TcInterval") == nil then
      uci.set("olsr",interfaces[i][".name"],"TcInterval","4.0") end
    if uci.get("olsr",interfaces[i][".name"],"HnaValidityTime") == nil then
      uci.set("olsr",interfaces[i][".name"],"HnaValidityTime","108.0") end
    if uci.get("olsr",interfaces[i][".name"],"HelloValidityTime") == nil then
      uci.set("olsr",interfaces[i][".name"],"HelloValidityTime","108.0") end
    if uci.get("olsr",interfaces[i][".name"],"TcValidityTime") == nil then
      uci.set("olsr",interfaces[i][".name"],"TcValidityTime","324.0") end
    if uci.get("olsr",interfaces[i][".name"],"HnaInterval") == nil then
      uci.set("olsr",interfaces[i][".name"],"HnaInterval","18.0") end
    if uci.get("olsr",interfaces[i][".name"],"HelloInterval") == nil then
      uci.set("olsr",interfaces[i][".name"],"HelloInterval","6.0") end
    if uci.get("olsr",interfaces[i][".name"],"MidInterval") == nil then
      uci.set("olsr",interfaces[i][".name"],"MidInterval","18.0") end
    if uci.get("olsr",interfaces[i][".name"],"AutoDetectChanges") == nil then
      uci.set("olsr",interfaces[i][".name"],"AutoDetectChanges","yes") end

    if #interfaces == 1 then 
      uci.set("olsr",interfaces[i][".name"],"Interface",set_device)
    else
      if uci.get("olsr",interfaces[i][".name"],"Interface") == set_device then
        iok = true
        break
      end
    end
  end          
  uci.commit("olsr")
--  os.execute("rm /tmp/.uci/olsr 2> /dev/null")
--  wwwprint("end config checking...")
--  if tonumber(olsr.webadmin.userlevel) < 2 then
--    check_basic configuration
--  else
--  end  
end

function write_config()  
  local sections = uci.get_all_types("olsr")
  wwwprint ("Writing "..output_file)
  local str_gral = ""
  for k,v in pairs(sections.olsr[1]) do
    if k ~= ".type"
    and k ~= ".name" then
      str_gral = str_gral..k.." "..v.."\n"
    end
  end
  str_gral = str_gral.."\n"
-- hna4 --
  local str_hna4 = ""
  if sections.Hna4 ~= nil and #sections.Hna4 > 0 then
    for i = 1, #sections.Hna4 do
      if sections.Hna4[i].NetAddr ~= nil 
      and sections.Hna4[i].NetMask ~= nil then 
        str_hna4 = str_hna4.."\t"..sections.Hna4[i].NetAddr.."\t"..sections.Hna4[i].NetMask.."\n"
      end
    end

    if str_hna4 ~= "" then 
      str_hna4 = "Hna4\n{\n"..str_hna4 .. "}\n\n"
    end
  end
-- hna6 --
  local str_hna6 = ""
  if sections.Hna6 ~= nil and #sections.Hna6 > 0 then
    for i = 1, #sections.Hna6 do
      if sections.Hna6[i].NetAddr ~= nil and sections.Hna6[i].NetMask ~= nil then 
        str_hna6 = str_hna6 .. "\t" .. sections.Hna6[i].NetAddr.."\t"..sections.Hna6[i].NetMask.."\n"
      end
    end
    if str_hna6 ~= "" then
      str_hna6 = "Hna6\n{\n"..str_hna6 .. "}\n"
    end
  end

  local str_ipc = ""
  if sections.ipc ~= nil then
    str_ipc = "IpcConnect\n{\n"
    for k, v in pairs(sections.ipc[1]) do
      if k ~= ".type"
      and k ~= ".name" then
        str_ipc = str_ipc .. "\t" .. k .. "\t" .. v .."\n"
      end
    end
    str_ipc = str_ipc .."\n"
    if sections.ipcHost ~= nil then
      for i = 1, #sections.ipcHost do
        str_ipc = str_ipc .. "\tHost\t"..sections.ipcHost[i].Host.."\n"
      end
    end
    str_ipc = str_ipc .."\n"
    if sections.ipcNet ~= nil then
      for i = 1, #sections.ipcNet do
        str_ipc = str_ipc .. "\tNet\t"..sections.ipcNet[i].NetAddr.."\t"..sections.ipcNet[i].NetMask.."\n"
      end
    end
    str_ipc = str_ipc .."}\n\n"
  end

  local str_plugins = ""
  for i = 1, #sections.LoadPlugin do
    local plugin = sections.LoadPlugin[i]
    if io.exists("/usr/lib/"..plugin.Library) then
    str_plugins = str_plugins.."LoadPlugin \""..plugin.Library.."\"\n{\n"
    for k,v in pairs(plugin) do
      if k ~= ".type"
      and k ~= ".name"
      and k ~= "Library" then
        if k == "hosts_file" then k = "hosts-file" end
        str_plugins = str_plugins .. "\tPlParam\t".."\""..k.."\"\t".."\""..v.."\"\n"
      end
    end
    if sections[plugin[".name"]] ~= nil then
      for j = 1, #sections[plugin[".name"]] do
        for p, n in pairs(sections[plugin[".name"]][j]) do
          if p ~= ".type"
          and p ~= ".name" then
            str_plugins = str_plugins.."\tPlParam\t\""..p.."\"\t\""..n.."\"\n"
          end
        end
      end
--    str_plugins = str_plugins.."\n"
    end
    str_plugins = str_plugins .. "}\n\n"
    else
      str_plugins = str_plugins.."###\n### CAUTION!!! this plugins is in your configuration file,\n### but is not Installed, plugin Name : "..plugin.Library.."\n###\n\n"
    end    
  end 

  local str_interface = ""
  for i=1, #sections.Interface do
    local interface = sections.Interface[i]
    str_interface = str_interface .. "Interface \""..interface.Interface.."\"\n{\n"
    for k, v in pairs(interface) do
      if k ~= ".type"
      and k ~= ".name"
      and k ~= "Interface" then
        str_interface = str_interface .. "\t"..k.."\t"..v.."\n"
      end
    end
    str_interface = str_interface .. "}\n"
  end

  str_interface = str_interface .. "\n"
  os.execute ("echo '".."###Conf file writen by IW-OSRL package###\n\n"..str_gral..str_ipc..str_hna4..str_hna6..str_plugins..str_interface.."' > "..output_file)
  wwwprint("Config file writed ok!")
end

return parser