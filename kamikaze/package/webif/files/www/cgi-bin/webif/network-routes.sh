#!/usr/bin/webif-page
<?
. /usr/lib/webif/webif.sh

exists "/tmp/.webif/file-routes" && ROUTES_FILE="/tmp/.webif/file-routes" || {
	ROUTES_FILE="/etc/routes"
	exists "$ROUTES_FILE" || touch "$ROUTES_FILE" >&- 2>&-
}

EDIT_FLAG=0

gen_netmask_options() {
	[ "$(($1))" -ge "0" ] && [ "$(($1))" -le "32" ] && local start=$1 || local start=32
	seq $start -1 0 | awk '
	{
		res = ""
		tmp = $1
		for (i = 1; i <= 4; i++) {
			if (tmp > 8) {
				tmp = tmp - 8
				res = res "255"
			} else if (tmp > 0) {
				res = res sprintf("%d",256-2^(8-tmp))
				tmp = 0
			} else {
				res = res "0"
			}
			if (i < 4) res = res "."
		}
		print "option|" res "|" res " /" $1
	}'
}

#"# this file is automatically generated"
#"# -host/-net ipaddr [netmask netmaskaddr] [gw ipaddr] [metric number] [dev interface] [additional route command pairs]"

update_routes() {
	exists /tmp/.webif/* || mkdir -p /tmp/.webif
	[ "$ROUTES_FILE" = "/etc/routes" ] && {
		cp -f "$ROUTES_FILE" "/tmp/.webif/file-routes" 2>/dev/null
		ROUTES_FILE="/tmp/.webif/file-routes"
	}
	awk	-v "mode=$1" \
		-v "f_target=$FORM_target" \
		-v "f_ipaddr=$FORM_ipaddr" \
		-v "f_netmask=$FORM_netmask" \
		-v "f_gateway=$FORM_gateway" \
		-v "f_metric=$FORM_metric" \
		-v "f_interface=$FORM_interface" \
		-v "f_additional=$FORM_additional" '
	BEGIN {
		if (f_target == "-host") f_netmask=""
	}

	function parseline(str) {
		delete _l
		_l["target"] = $1
		_l["ipaddr"] = $2
		for (_i=3; _i<NF; _i=_i+2) _l[tolower($_i)] = $(_i+1)
	}
	/^#/ {next}
	{
		if (mode == "del") {
			parseline($0)
			if (!( (_l["target"] == f_target) && (_l["ipaddr"] == f_ipaddr) && (_l["netmask"] == f_netmask) && (_l["gw"] == f_gateway) && (_l["metric"] == f_metric) && (_l["dev"] == f_interface) )) print $0
		} else print $0
	}
	END {
		if (mode == "add") {
			print f_target " " f_ipaddr ((f_netmask == "") ? "" : " netmask " f_netmask) ((f_gateway == "") ? "" : " gw " f_gateway) ((f_metric == "") ? "" : " metric " f_metric) ((f_interface == "") ? "" : " dev " f_interface) ((f_additional == "") ? "" : " " f_additional)
		}
	}
	' < "$ROUTES_FILE" > "$ROUTES_FILE.temp"
	mv -f "$ROUTES_FILE.temp" "$ROUTES_FILE" 2>/dev/null
	[ ! -s "$ROUTES_FILE" ] && rm -f "$ROUTES_FILE" 2>/dev/null
}

! empty "$FORM_action" && {
	#unsanitize
	! empty "$FORM_additional" && {
		FORM_additional=$(echo "$FORM_additional" | sed 's/%20/ /g')
	}
	equal "$FORM_action" "editroute" && {
		EDIT_FLAG=1
		update_routes del
	}
	equal "$FORM_action" "addroute" && {
		EDIT_FLAG=1
	}
	equal "$FORM_action" "removeroute" && {
		update_routes del
	}
}

! empty "$FORM_submit" && {
	[ "$FORM_target" = "-net" ] && netmask_validation_required="required"
	validate <<EOF
ip|FORM_ipaddr|@TR<<network_routes_IP_Address#IP Address>>|required|$FORM_ipaddr
netmask|FORM_netmask|@TR<<network_routes_Netmask#Netmask>>|$netmask_validation_required|$FORM_netmask
ip|FORM_gateway|@TR<<network_routes_Gateway#Gateway>>||$FORM_gateway
int|FORM_metric|@TR<<network_routes_Metric#Metric>>||$FORM_metric
string|FORM_interface|@TR<<network_routes_Interface#Interface>>||$FORM_interface
string|FORM_additional|@TR<<network_routes_Other_options#Other options>>||$FORM_additional
EOF
	equal "$?" 0 && {
		# maybe also check with route command?
		update_routes add
		unset FORM_target FORM_ipaddr FORM_netmask FORM_gateway FORM_metric FORM_interface FORM_additional
		unset netmask_validation_required
	} || {
		EDIT_FLAG=1
	}
}

header_inject_head=$(cat <<EOF
<style type="text/css">
<!--
#stylebuttons .cssbutton {
	background-color: #f6f4f1;
	border: 2px #888785 outset;
	border-color: #c6c4c1 #888785 #888785 #c6c4c1;
	padding: 1px 3px 1px 2px;
	font-size: 0.83em;
	text-decoration: none;
}
#stylebuttons .cssbutton, .cssbutton:visited, .cssbutton:active {
	color: #000000;
}
#stylebuttons .delbut, .delbut:visited, .delbut:active {
	color: #d44533;
}
#stylebuttons .cssbutton:active {
	border-style: inset;
	border-color: #f6f4f1 #f6f4f1 #888785 #888785;
	background-color: #f6f4f1;
	padding: 1px 2px 1px 3px;
}
#stylebuttons span {
	display: none;
}
td {
	padding-top: 1px;
	padding-bottom: 2px;
}
-->
</style>

EOF
)

header "Network" "Routes" "@TR<<network_routes_Static_Routes#Static Routes>>" '' "$SCRIPT_NAME"

echo "<div class=\"warning\">@TR<<big_warning#WARNING>>: @TR<<page_is_wip__do_not_translate#This page is a work in the progress. It is the real hazard using it. :-)>></div>"

[ "$EDIT_FLAG" == "1" ] && {
	# set up form
	empty "$FORM_target" && FORM_target="-net"
	netmask_options=$(gen_netmask_options 30)
	display_form <<EOF
start_form|@TR<<network_routes_Add_route#Add route>>
onchange|modechange
field|@TR<<network_routes_Target#Target>>|field_target|
radio|target|$FORM_target|-host|@TR<<Host>>
radio|target|$FORM_target|-net|@TR<<Network>>
field|@TR<<network_routes_IP_Address#IP Address>>|field_ipaddr|
text|ipaddr|$FORM_ipaddr
field|@TR<<network_routes_Netmask#Netmask>>|field_netmask|
select|netmask|$FORM_netmask
$netmask_options
field|@TR<<network_routes_Gateway#Gateway>>|field_gateway|
text|gateway|$FORM_gateway
field|@TR<<network_routes_Metric#Metric>>|field_metric|
text|metric|$FORM_metric
field|@TR<<network_routes_Interface#Interface>>|field_interface|
text|interface|$FORM_interface
field|@TR<<network_routes_Other_options#Other options>>|field_additional|
text|additional|$FORM_additional
helpitem|network_routes_IP_Address_netmask#IP Address/Netmask
helptext|network_routes_IP_Address_helptext#Helptext.
helpitem|network_routes_Gateway#Gateway
helptext|network_routes_Gateway_helptext#Helptext.
helpitem|network_routes_Metric#Metric
helptext|network_routes_Metric_helptext#Helptext.
helpitem|network_routes_Interface#Interface
helptext|network_routes_Interface_helptext#Helptext.
helpitem|network_routes_Other_options#Other options
helptext|network_routes_Other_options_helptext#Helptext.
end_form
EOF
}

?>
<div class="settings">
<h3><strong>@TR<<network_routes_Configured_Static_Routes#Configured Static Routes>></strong></h3>
<div id="stylebuttons">
<?
# static routes in /etc/routes
cat "$ROUTES_FILE" 2>/dev/null | awk -v "url=$SCRIPT_NAME" -v "editflag=$EDIT_FLAG" '
BEGIN {
	records=0
	odd=1
}
function tableheader() {
	print "<table style=\"text-align: left;\" border=\"0\" cellpadding=\"1\" cellspacing=\"3\">"
	print "<tbody>"
	print "<tr>"
	print "<th>@TR<<network_routes_IP_Address#IP Address>></th>"
	print "<th>@TR<<network_routes_Gateway#Gateway>></th>"
	print "<th>@TR<<network_routes_Netmask#Netmask>></th>"
	print "<th>@TR<<network_routes_Metric#Metric>></th>"
	print "<th>@TR<<network_routes_Interface#Interface>></th>"
	print "<th>@TR<<network_routes_Other_options#Other options>></th>"
	print "<th>@TR<<network_routes_Action#Action>></th>"
	print "</tr>"
}
function parseline(str) {
	delete _l
	_l["target"] = $1
	_l["ipaddr"] = $2
	for (_i=3; _i<NF; _i=_i+2) _l[tolower($_i)] = $(_i+1)
}
function blanktd() {
	print "<td>&nbsp;</td>"
}
/^#/ {next}
(($1 == "-host") || ($1 == "-net")) {
	parseline($0)
	if (records == 0) tableheader()
	records=records+1
	if (odd == 1) {
		print "	<tr>"
		odd--
	} else {
		print "	<tr class=\"odd\">"
		odd++
	}
	href="target=" _l["target"]
	href=href "&amp;ipaddr=" _l["ipaddr"]
	print "<td>" _l["ipaddr"] "</td>"
	if (_l["gw"] != "") {
		print "<td>" _l["gw"] "</td>"
		href=href "&amp;gateway=" _l["gw"]
	} else blanktd()
	if (_l["netmask"] != "") {
		print "<td>" _l["netmask"] "</td>"
		href=href "&amp;netmask=" _l["netmask"]
	} else blanktd()
	if (_l["metric"] != "") {
		print "<td>" _l["metric"] "</td>"
		href=href "&amp;metric=" _l["metric"]
	} else blanktd()
	if (_l["dev"] != "") {
		print "<td>" _l["dev"] "</td>"
		href=href "&amp;interface=" _l["dev"]
	} else blanktd()
	additional=""
	for (param in _l) {
		if (param !~ /^(target|ipaddr|netmask|gw|metric|dev)$/)
			additional=param " " _l[param] ((additional == "") ? "" : " " additional)
	}
	if (additional != "") {
		print "<td>" additional "</td>"
		href=href "&amp;additional=" additional
	} else blanktd()
	gsub(/ /, "%20", href)
	# buttons
	print "<td>"
	if (editflag == 0)
		print "<a class=\"cssbutton\" href=\"" url "?action=editroute&amp;" href "\">@TR<<network_routes_Edit#Edit>></a>"
	print "&nbsp;"
	if (editflag == 0)
		print "<a class=\"cssbutton delbut\" href=\"" url "?action=removeroute&amp;" href "\">@TR<<network_routes_Delete#Delete>></a>"
	print "</td>"
	print "</tr>"
}
END {
	if (records == 0) {
		printf "<p>@TR<<network_routes_No_configured_routes#No configured static routes exist.>>"
		if (editflag == 0)
			printf "&nbsp;<a class=\"cssbutton\" href=\"" url "?action=addroute\">@TR<<network_routes_Add_new_route#Add new route>></a>"
		print "</p>"
	} else {
		if (editflag == 0)
			print "<tr><td colspan=\"7\" align=\"right\"><a class=\"cssbutton\" href=\"" url "?action=addroute\">@TR<<network_routes_Add_new_route#Add new route>></a></td></tr>"
		print "</tbody>"
		print "</table>"
	}
}'
?>
</div>
</div>

<br />

<div class="settings">
<h3><strong>@TR<<network_routes_routing_table#Kernel Routing Table>></strong></h3>
<table style="text-align: left;" border="0" cellpadding="1" cellspacing="3">
<tbody>
<tr>
<th>@TR<<Destination>></th>
<th>@TR<<Gateway>></th>
<th>@TR<<Genmask>></th>
<th>@TR<<Flags>></th>
<th>@TR<<Metric>></th>
<th>@TR<<Ref>></th>
<th>@TR<<Use>></th>
<th>@TR<<Interface>></th>
</tr>
<?
        route -n | awk '
BEGIN {
	odd=1
}
NR > 2 {
	if (odd == 1) {
		print "	<tr>"
		odd--
	} else {
		print "	<tr class=\"odd\">"
		odd++
	}
	for (i=1; i<=NF; i++) printf "<td>" $i "</td>"
	print "</tr>"
}
'
?>
</table>
</div>

<? footer ?>
<!--
##WEBIF:name:Network:500:Routes
-->
