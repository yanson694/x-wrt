#!/usr/bin/lua
--------------------------------------------------------------------------------
-- freeradius apply handler
-- Author(s) [in order of work date]:
--       Fabián Omar Franzotti
--         
-- Configuration files referenced:
--    freeradius
--   
--
--------------------------------------------------------------------------------
print ("Committing Chilli".."<br>")
os.execute("uci commit chilli")
print("Checking freeradius installation".."<br>")
local write_file
if io.exists("/usr/share/freeradius/dictionary") then
  local dict = io.totable("/usr/share/freeradius/dictionary",true)
  print("Updating /usr/share/freeradius/dictionary".."<br>")
  if dict[1] ~= "$INCLUDE dictionary.chillispot" then
    table.insert(dict,1,"$INCLUDE dictionary.chillispot")
  end
  write_file = io.open("/usr/share/freeradius/dictionary","w")
  write_file:write(table.concat(dict,'\n'))
  write_file:close()
end

print ("Writing init file /etc/init.d/chilli".."<br>")
init_file = [[#!/bin/sh /etc/rc.common
START=59

EXTRA_COMMANDS="status checkrunning radconfig condrestart"
EXTRA_HELP="	status	Show current status
    checkrunning If services is not running start it"

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/chilli
NAME=chilli
DESC=chilli
CONFFILE=/etc/chilli.conf
OPTS="--pidfile /var/run/$NAME.pid"

. /etc/chilli/functions
check_required

start() {
	echo -n "Starting $DESC: "
   /sbin/modprobe tun >/dev/null 2>&1
   echo 1 > /proc/sys/net/ipv4/ip_forward

   writeconfig
   radiusconfig

   (crontab -l 2>&- | grep -v $0
      test ${HS_ADMINTERVAL:-0} -gt 0 && echo "*/$HS_ADMINTERVAL * * * * $0 radconfig"
      echo "*/10 * * * * $0 checkrunning"
      #echo "*/2  * * * * $0 arping"
   ) | crontab - 2>&-
  $DAEMON -- $OPTS
  RETVAL=$?
	echo "$NAME."
}

status () {
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo "$DESC running"
      exit 0
		}
    echo "$DESC stopped"
}

checkrunning () {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
			exit 0
		}
    $0 start
}

radconfig () {
      [ -e $MAIN_CONF ] || writeconfig
      radiusconfig
}

stop () {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo -n "Stopping $DESC: "
      crontab -l 2>&- | grep -v $0 | crontab -
      kill -TERM "$pid"
      [ "$?" -eq 0 ] && sleep 1
      [ ! -d "/proc/$pid" ] && echo "OK" || {
  			echo "Failed!"
        echo -n "Killing chilli..."
        kill -KILL "$pid"
        [ "$?" -eq 0 ] && echo "OK" || echo "Failed!"
      }
      exit 0
		}
		echo "$DESC was not running"
}

condrestart() {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo -n "Restarting $DESC: "
      $0 restart
      RETVAL=$?
		}
}
]]
write_file = io.open("/etc/init.d/chilli1","w")
write_file:write(init_file)
write_file:close()
print ("Writing configuration file /etc/chilli/config".."<br>")
local hotspot = uciClass.new("chilli")
chilli = hotspot.chilli
local conf_file = "## this file is automatically generated\n\n"
conf_file = conf_file..[[
#   Directory specifying where internal web pages can be served
#   by chilli with url /www/<file name>. Only extentions like .html
#   .jpg, .gif, .png, .js are allowed. See below for using .chi as a
#   CGI extension.
HS_WWWDIR=/etc/chilli/www

#   Using this option assumes 'haserl' is installed per-default
#   but, and CGI type program can ran from wwwsh to process requests
#   to chilli with url /www/filename.chi
HS_WWWBIN=/etc/chilli/wwwsh

]]

for i=1, #hotspot.sections do
  for k,v in pairs(hotspot.sections[1].values) do
    conf_file = conf_file ..k.."="..v.."\n"
  end
end

write_file = io.open("/etc/chilli/conf","w")
write_file:write(conf_file)
write_file:close()
--[[
__RESTART["Chillispot"] = {}
__RESTART["Chillispot"]["pkg"] = "hotspot"
__RESTART["Chillispot"]["cfg"] = "service"
__RESTART["Chillispot"]["opt"] = "enable"
__RESTART["Chillispot"]["init"] = "/etc/init.d/chilli"
]]--