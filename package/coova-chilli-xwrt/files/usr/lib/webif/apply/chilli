#!/usr/bin/lua
--------------------------------------------------------------------------------
-- freeradius apply handler
-- Author(s) [in order of work date]:
--       Fabián Omar Franzotti
--         
-- Configuration files referenced:
--    freeradius
--   
--
--------------------------------------------------------------------------------
--require("iw-uci")
--require("net")
package.cpath = "./?.so;/usr/lib/lua/5.1/?.so" 
package.path = "./?.lua;/usr/lib/webif/LUA/?.lua;/usr/lib/webif/LUA/pkgs/?.lua;/usr/lib/lua/5.1/?.lua;/usr/lib/lua/5.1/?/init.lua;/usr/lib/lua/5.1/?.lua;/usr/lib/lua/5.1/?/init.lua" 
require("common")
require("iwuci")
local hotspot = uciClass.new("chilli")
--[[
for k,v in pairs(hotspot) do
  print(k,v,"<br>")
  if type(v) == "table" then
    for i,a in pairs(v) do
      print("&nbsp;&nbsp;&nbsp;",i,a,"<br>")
      if type(a) == "table" then
        for j,u in pairs(a) do
          print("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",j,u,"<br>")
          if type(u) == "table" then
            for x,y in pairs(u) do
              print("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",x,y,"<br>")
            end
          end
        end
      end
    end
  end
end
]]--
if tonumber(hotspot.service.userlevel) < 2 then
  iwuci.set("chilli.service","websettings") 
  iwuci.set("chilli.service.portal","2") 
  iwuci.set("chilli.service.users","1") 
  iwuci.set("chilli.network","chilli") 
  iwuci.set("chilli.network.HS_UAMLISTEN","192.168.182.1") 
  iwuci.set("chilli.network.HS_NETWORK","192.168.182.0") 
  iwuci.set("chilli.network.HS_NETMASK","255.255.255.0") 
  iwuci.set("chilli.network.HS_DNS1","192.168.182.1")
  iwuci.set("chilli.network.HS_DNS2","204.225.44.3")

  iwuci.set("chilli.radius","chilli")
  iwuci.set("chilli.radius.HS_RADIUS","127.0.0.1")
  iwuci.set("chilli.radius.HS_RADIUS2","127.0.0.1")
  iwuci.set("chilli.radius.HS_RADSECRET", 'testing123')
  iwuci.set("chilli.radius.HS_RADAUTH",'1812')
  iwuci.set("chilli.radius.HS_RADACCT",'1813')
  
  iwuci.set("chilli.nasid","chilli")
  iwuci.set("chilli.nasid.HS_NASID","X-Wrtnas")
  iwuci.set("chilli.nasid.HS_LOC_NAME","My X-Wrt Hotspot")
  iwuci.set("chilli.nasid.HS_LOC_NETWORK","X-Wrt Network")

  iwuci.set("chilli.uam","chilli")
  iwuci.set("chilli.uam.HS_UAMSERVER","192.168.182.1") 
  iwuci.set("chilli.uam.HS_UAMPORT","3990") 
  iwuci.set("chilli.uam.HS_UAMFORMAT","http://$HS_UAMSERVER/cgi-bin/login/pba.lua") 
  iwuci.set("chilli.uam.HS_UAMHOMEPAGE","http://$HS_UAMLISTEN:$HS_UAMPORT/www/coova.html")
  iwuci.set("chilli.uam.HS_UAMALLOW","x-wrt.org")
end

print ("Committing Chilli".."<br>")
os.execute("uci commit chilli")
--os.execute("rm /tmp/.uci/chilli")
hotspot = uciClass.new("chilli")
if tonumber(hotspot.service.users) > 0 then
  print("Checking freeradius installation".."<br>")
--  freeradpkgs = pkgInstalledClass.new("freeradius,freeradius-mod-files,freeradius-mod-chap,freeradius-mod-radutmp,freeradius-mod-realm,iw-freeradius",true)
  local write_file
  if io.exists("/usr/share/freeradius/dictionary") then
    local dict = io.totable("/usr/share/freeradius/dictionary",true)
    print("Updating /usr/share/freeradius/dictionary".."<br>")
    if dict[1] ~= "$INCLUDE dictionary.chillispot" then
      table.insert(dict,1,"$INCLUDE dictionary.chillispot")
    end
    write_file = io.open("/usr/share/freeradius/dictionary","w")
    write_file:write(table.concat(dict,'\n'))
    write_file:close()
  end
end
print ("Writing init file /etc/init.d/chilli".."<br>")
init_file = [[#!/bin/sh /etc/rc.common
START=59

EXTRA_COMMANDS="status checkrunning radconfig condrestart"
EXTRA_HELP="	status	Show current status
    checkrunning If services is not running start it"

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/chilli
NAME=chilli
DESC=chilli
CONFFILE=/etc/chilli.conf
OPTS="--pidfile /var/run/$NAME.pid"

. /etc/chilli/functions
check_required

start() {
	echo -n "Starting $DESC: "
   /sbin/modprobe tun >/dev/null 2>&1
   echo 1 > /proc/sys/net/ipv4/ip_forward

   writeconfig
   radiusconfig

   (crontab -l 2>&- | grep -v $0
      test ${HS_ADMINTERVAL:-0} -gt 0 && echo "*/$HS_ADMINTERVAL * * * * $0 radconfig"
      echo "*/10 * * * * $0 checkrunning"
      #echo "*/2  * * * * $0 arping"
   ) | crontab - 2>&-
  $DAEMON -- $OPTS
  RETVAL=$?
	echo "$NAME."
}

status () {
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo "$DESC running"
      exit 0
		}
    echo "$DESC stopped"
}

checkrunning () {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
			exit 0
		}
    $0 start
}

radconfig () {
      [ -e $MAIN_CONF ] || writeconfig
      radiusconfig
}

stop () {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo -n "Stopping $DESC: "
      crontab -l 2>&- | grep -v $0 | crontab -
      kill -TERM "$pid"
      [ "$?" -eq 0 ] && sleep 1
      [ ! -d "/proc/$pid" ] && echo "OK" || {
  			echo "Failed!"
        echo -n "Killing chilli..."
        kill -KILL "$pid"
        [ "$?" -eq 0 ] && echo "OK" || echo "Failed!"
      }
      exit 0
		}
		echo "$DESC was not running"
}

condrestart() {
    local pid
		pid=$(cat "/var/run/$NAME.pid" 2>/dev/null)
		[ -n "$pid" -a -d "/proc/$pid" ] && {
      echo -n "Restarting $DESC: "
      $0 restart
      RETVAL=$?
		}
}
]]
write_file = io.open("/etc/init.d/chilli","w")
write_file:write(init_file)
write_file:close()
print ("Writing configuration file /etc/chilli/config".."<br>")

local conf_file = "## this file is automatically generated\n\n"
conf_file = conf_file..[[
#   Directory specifying where internal web pages can be served
#   by chilli with url /www/<file name>. Only extentions like .html
#   .jpg, .gif, .png, .js are allowed. See below for using .chi as a
#   CGI extension.
HS_WWWDIR=/etc/chilli/www

#   Using this option assumes 'haserl' is installed per-default
#   but, and CGI type program can ran from wwwsh to process requests
#   to chilli with url /www/filename.chi
HS_WWWBIN=/etc/chilli/wwwsh

]]
conf_file = conf_file .."HS_UAMSERVER".."="..hotspot.uam.HS_UAMSERVER.."\n"
conf_file = conf_file .."HS_UAMPORT".."="..hotspot.uam.HS_UAMPORT.."\n"
for i=1, #hotspot.chilli do
  for k,v in pairs(hotspot.chilli[i].values) do
    if k ~= "HS_UAMSERVER"
    and k ~= "HS_UAMPORT" then
      if k == "HS_LOC_NAME" 
      or k == "HS_LOC_NETWORK" then
        conf_file = conf_file ..k.."=\""..v.."\"\n"
      else
        conf_file = conf_file ..k.."="..v.."\n"
      end
    end
  end
end

write_file = io.open("/etc/chilli/config","w")
write_file:write(conf_file)
write_file:close()

__RESTART["Chillispot"] = {}
__RESTART["Chillispot"]["pkg"] = "chilli"
__RESTART["Chillispot"]["cfg"] = "service"
__RESTART["Chillispot"]["opt"] = "enable"
__RESTART["Chillispot"]["init"] = "/etc/init.d/chilli"
