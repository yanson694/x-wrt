#!/usr/bin/lua
package.cpath = "?;./?.so;/usr/lib/lua/5.1/?.so" 
package.path = "?;./?.lua;/usr/local/share/lua/5.1/iw/?.lua;/usr/lib/webif/LUA/?.lua;/usr/lib/webif/LUA/pkgs/?.lua;/usr/lib/lua/5.1/?.lua" 

require("common")
require("iw-luaipkg")

function tcount(t)
  local c = 0
  for i,k in pairs(t) do
    c = c + 1
  end
  return c
end

function repo_list(t)
  for i,v in pairsByKeys(t) do
    print(i,v.url)
  end
end

function list_installed_pkgs(pkg,detailled)
  if detailled == true then
    print(pkg:detailled_status())
  else
    for i,v in pairsByKeys(pkg.__installed) do
      print(i,v.Version)
    end
  end
end

function list_pkgs(t,detailled,notinstalled)
  for p,r in pairsByKeys(t.__repo) do
    local show = false
    for pkg, data in pairsByKeys(r.pkgs) do
      if notinstalled == true and t.__installed[pkg] == nil 
      or notinstalled == nil or notinstalled == false then
        if show == false then
          print(p,r.url)
          show = true
        end  
        if detailled then
          for u,w in pairs(data) do
            print(u,w)
          end
        else
--          print("",pkg,data.Version,data.Description)
          print("",pkg,data.Version,data.MD5Sum)
        end
      end
    end
    if show == true then print("") end
  end
end

function list_toinstall(pepe)
  local ctrl_dep = {}
  local tinstall = {}
  local tmpdir = "/tmp"
  repeat
    for i,v in pairs(pepe.__toinstall) do
      local ok = true
      if v.Depends ~= nil then
        local depends = string.gsub(v.Depends,","," ")
        for dep in string.gmatch(depends,"%S+") do
          if pepe.__installed[dep] == nil and ctrl_dep[dep] == nil then
            ok = false
            break
          end
        end
      end
      if ok == true then
--        if pepe.__installed[i] == nil then
        tinstall[#tinstall+1] = {}
        tinstall[#tinstall]["url"] = v.url
        tinstall[#tinstall]["file"] = v.Filename
        ctrl_dep[i] = #tinstall
        pepe.__toinstall[i] = nil
--        end
      end
    end
  until tcount(pepe.__toinstall) == 0 
  for i = 1, #tinstall do
    print(tinstall[i].url..tinstall[i].file)
  end
end

function install_pkgs(pkg)
  local tinstall = pkg:install_pkgs()
  print("Please wait... ")
  for i = 1, #tinstall do
    local dest = tinstall[i].Package.." ("..tinstall[i].Version..")"
    print("Installing "..dest)
    print("Downloading "..tinstall[i].url..tinstall[i].file)
    pkg:download(tinstall[i].url,tinstall[i].file)

    print("Unpack file "..tinstall[i].file)
    local tfiles, tctrl_file, warning_exists, str_exec = pkg:unpack(tinstall[i])

    if warning_exists == true then
      tfiles = pkg:wath_we_do(tfiles)
    end

    print("Configuring "..dest)
    if string.len(str_exec) > 0 then
      os.execute(str_exec)
    end
    print("Copying files")
    pkg:processFiles(tfiles)
    local str_installed = "Package: "..tctrl_file.Package.."\n"
    str_installed = str_installed.."Version: "..tctrl_file.Version.."\n"
    if tctrl_file.Depends ~= nil then
      str_installed = str_installed.."Depends: "..tctrl_file.Depends.."\n"
    end
    str_installed = str_installed.."Provides: "..tctrl_file.Provides.."\n"
    str_installed = str_installed.."Status: install ok installed\n"
    str_installed = str_installed.."Architecture: "..tctrl_file.Architecture.."\n"
    if conffiles ~= nil then
      str_installed = str_installed.."Conffiles: "..conffiles.."\n"
    end
    str_installed = str_installed.."Installed-Time: "..tostring(os.time()).."\n"
    pkg:process_pkgs_file(str_installed)
    pkg:write_status()
  end
end

local script = arg[0]
local cmd = arg[1]
local pkg_list = ""
local detailled = false
local not_found = {}
local invalid_repo = {}

for i=2, #arg do
    if arg[i] == "-r" then
      use_repo = arg[i+1]
      i = i + 2
    elseif arg[i] == "-v" then
      use_version = arg[i+1]
      i = i + 2
    elseif arg[i] == "-notinstalled" then
      not_installed = true
    elseif arg[i] == "-d" then
      detailled = true
--    elseif arg[i] == ">"
--    or arg[i] == ">>" then
--      break
    else 
      pkg_list=pkg_list.." "..arg[i]
    end
    if i>=#arg then break end
end
pkg_list = string.trim(pkg_list)
if pkg_list == nil then pkg_list = "" end

if cmd == "list" then
  print("List of Packages "..type(pkg_list),pkg_list)
  local pkg = lpkgClass.new(pkg_list,use_repo)
	pkg:loadRepo_list(pkg.repo_list)
  
  list_pkgs(pkg,detailled,not_installed)
  not_found = pkg.__notfound
  invalid_repo = pkg.__invalidrepo

elseif cmd == "list_installed" then
  print("List Installed packages")
  local pkg = lpkgClass.new(pkg_list,use_repo)
  list_installed_pkgs(pkg,detailled)
  not_found = pkg.__notfound
  invalid_repo = pkg.__invalidrepo

elseif cmd == "list_repo" then
  print("Repository List")
  local pkg = lpkgClass.new(pkg_list,use_repo)
  repo_list(pkg.__repo)
  not_found = pkg.__notfound
  invalid_repo = pkg.__invalidrepo

elseif cmd == "list_to_install" then
  if string.len(pkg_list) > 0 then
    print("To install packages")
    local pkg = lpkgClass.new(pkg_list,use_repo)
  	pkg:loadRepo_list(pkg.repo_list)
    list_toinstall(pkg,use_version)
    not_found = pkg.__notfound
    invalid_repo = pkg.__invalidrepo
  else
    print([[Package(s) must be especificated]])
  end
elseif cmd == "install" then
  if string.len(pkg_list) > 0 then
    print("install packages")
    local pkg = lpkgClass.new(pkg_list,use_repo)
  	pkg:loadRepo_list(pkg.repo_list)
    install_pkgs(pkg,use_version)
    not_found = pkg.__notfound
    invalid_repo = pkg.__invalidrepo
  else
    print([[Package(s) must be especificated]])
  end
else
  print(arg[0].." [command] [pacage[*]] [-options]")
  print("","commands")
  print("","","list                  ", "list of packages")
  print("","","list_installed        ", "list installed packages")
  print("","","list_repo             ", "list repositories")
  print("","","list_to_install       ", "list selected packages to install")
  print("","","install               ", "install packages")
  print("","options")
  print("","","-r repository_name,...", "use only repositories in this list (comma separated)")
end
local show = false
for i,v in pairsByKeys(not_found) do
  if show == false then
    print("NOT FOUND!!!", "Not repository for this packages...")
    show = true 
  end
  print("",i)
end
show = false
if #invalid_repo > 0 then
  for i=1, #invalid_repo do
    if show == false then
      print("Invalid repo")
      show = true 
    end
    print("",invalid_repo[i])
  end
end
