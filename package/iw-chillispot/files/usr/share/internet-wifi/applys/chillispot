require("uci_iwaddon")
parser = {}
local P = {}
parser = P
-- Import Section:
-- declare everything this package needs from outside
local io = io
local wwwprint = wwwprint
if wwwprint == nil then wwwprint=print end
local string = string
local table = table
local pairs = pairs
local uci = uci
local tonumber = tonumber
-- no more external access after this point
setfenv(1, P)

enable = tonumber(uci.get("chillispot.webadmin.enable")) or 0
userlevel = tonumber(uci.get("chillispot.webadmin.userlevel")) or 0
radiususers = tonumber(uci.get("chillispot.webadmin.radconf")) or 0

reboot = false                -- reboot device after all apply process
--exe_before = {} -- execute os process in this table before any process

exe_after  = {} -- execute os process after all apply process
if radiususers > 1 then
  call_parser = "freeradius freeradius_check freeradius_proxy freeradius_clients"
  exe_after["/etc/init.d/radiusd restart"]="freeradius"
end
exe_after["/etc/init.d/network restart"]="network"
exe_after["wifi"]="wifi"

script = "chilli"
init_script = "/etc/init.d/chilli"

-- depends_pkgs = "libltdl freeradius freeradius-mod-files freeradius-mod-chap freeradius-mod-radutmp freeradius-mod-realm iw-freeradius"

function process()
--  if userlevel < 2 then basic_settings() end
  wwwprint("Chilli Parsers...")

  radiususers = tonumber(uci.get("chillispot.webadmin.radconf"))
  if radiususers > 1 then
    wwwprint("Checking freeradius installation")
    local write_file
    if io.exists("/usr/share/freeradius/dictionary") then
      local dict = io.totable("/usr/share/freeradius/dictionary",true)
      wwwprint("Updating /usr/share/freeradius/dictionary")
      if dict[1] ~= "$INCLUDE dictionary.chillispot" then
        table.insert(dict,1,"$INCLUDE dictionary.chillispot")
      end
      write_file = io.open("/usr/share/freeradius/dictionary","w")
      write_file:write(table.concat(dict,'\n'))
      write_file:close()
    end
  end
  local netnm = uci.check_set("chillispot","webadmin","netname","chilli")
  if userlevel < 2 then
    uci.set("chillispot","webadmin","ipaddr","192.168.20.1")
    uci.set("chillispot","webadmin","netmask","255.255.255.0")
    uci.set("chillispot","webadmin","device",uci.get("chillispot","webadmin","ifwifi"))
  end
  uci.save("chillispot")
  local chilli = uci.get_all("chillispot")
  local network = uci.get_all("network")
  if network[netnm] == nil then 
    uci.set("network",netnm,"interface")
    uci.save("network")
    network = uci.get_all("network")
  end
    
--  if uci.get("chillispot.webadmin.ifwifi") and uci.get("chillispot.net.dhcpif") == nil then
    uci.check_set("network",netnm,"interface")
    uci.set("network",netnm,"proto","static")
    uci.set("network",netnm,"type","bridge")
    uci.set("network",netnm,"ipaddr",chilli.webadmin.ipaddr)
    uci.set("network",netnm,"netmask",chilli.webadmin.netmask)
    uci.save("network")
    if uci.get("network",netnm,"ifname") == nil then
      uci.set("network",netnm,"ifname",uci.get("chillispot.webadmin.ifwifi"))
    elseif not string.gmatch(uci.get("network",netnm,"ifname"),uci.get("chillispot.webadmin.ifwifi")) then
      uci.set("network",netnm,"ifname", uci.get("network",netnm,"ifname").." "..uci.get("chillispot.webadmin.ifwifi"))
    end
    uci.save("network")
    network = uci.get_all("network")
    if network[netnm].type ~= "bridge" then
      if network[netnm].ifname ~= nil then
        uci.set("chillispot","net","dhcpif",network[netnm].ifname)
      end
    else
      uci.set("chillispot","net","dhcpif","br-"..netnm)
    end
    uci.save("chillispot")
--  end

  network = uci.get_all("network")
  if uci.get("chillispot","webadmin","enable") == "1" then
    local wififace = uci.get_type("wireless","wifi-iface")
    for i=1, #wififace do
      if wififace[i].device == network[netnm].ifname then
        if wififace[i].network == "lan" or wififace[i].network ~= "wifi" then
          uci.set("wireless",wififace[i][".name"],"network",uci.get("chillispot","webadmin","netname"))
        end
        uci.set("wireless",network[netnm].ifname,"disabled","0")
        break
      end
    end
  end    
  uci.commit("network")
  uci.commit("wireless")
  uci.commit("chillispot")
  write_init()
  write_config()
end

function write_init()
  wwwprint ("Writing init file /etc/init.d/chilli")
  local init_file = [[#!/bin/sh /etc/rc.common
START=69

RUN_D=/var/run
PID_F=$RUN_D/chilli.pid
CRONSET="* * * * * /usr/share/internet-wifi/pkgs/chilli/minute.cron"

start() {
	/usr/sbin/chilli
  /usr/share/internet-wifi/lib/cron_ctrl add "$CRONSET"
}

stop() {
  /usr/share/internet-wifi/lib/cron_ctrl del "$CRONSET"
	[ -f $PID_F ] && kill $(cat $PID_F) >/dev/null 2>&1
}

]]
  wwwprint ("init file /etc/init.d/chilli writed OK!".."<br>")
  write_file = io.open("/etc/init.d/chilli","w")
  write_file:write(init_file)
  write_file:close()
end

function write_config()
  local conf_file ="#### This conf file was writed by iw-apply for chillispot ####\n"
  local chillisetting = uci.get_type("chillispot","settings")
  for n=1, #chillisetting do
    for k,v in pairs(chillisetting[n]) do
      if k ~= ".type"
      and k ~= ".name" then
        if k == "debug"
        or k == "macauth"
        or k == "uamanydns"
        or k == "coanoipcheck"
        or k == "acctupdate"
        or k == "fg"
        or k == "eapolenable" then
          if tonumber(v) == 1 then
            conf_file = conf_file .. k .. "\n"
          end
        else
          conf_file = conf_file .. k .. " " .. v .. "\n"
        end
      end
    end
  end
  
  write_file = io.open("/etc/chilli.conf","w")
  write_file:write(conf_file)
  write_file:close()
end

return parser
